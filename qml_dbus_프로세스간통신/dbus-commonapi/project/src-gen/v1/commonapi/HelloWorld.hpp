/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v201907221047.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COMMONAPI_HELLO_WORLD_HPP_
#define V1_COMMONAPI_HELLO_WORLD_HPP_




#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>
#include <string>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace commonapi {

class HelloWorld {
public:
    virtual ~HelloWorld() { }

    static inline const char* getInterface();
    static inline CommonAPI::Version getInterfaceVersion();
    
    struct testEnum : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            TEST_FIRST = 0,
            TEST_SECOND = 1,
            TEST_THIRD = 2
        };
    
        testEnum()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::TEST_FIRST)) {}
        testEnum(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::TEST_FIRST):
                case static_cast< int32_t>(Literal::TEST_SECOND):
                case static_cast< int32_t>(Literal::TEST_THIRD):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const testEnum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const testEnum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const testEnum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const testEnum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const testEnum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const testEnum &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    struct testStruct : CommonAPI::Struct< int32_t, std::string> {
    
        testStruct()
        {
            std::get< 0>(values_) = 0;
            std::get< 1>(values_) = "";
        }
        testStruct(const int32_t &_code, const std::string &_id)
        {
            std::get< 0>(values_) = _code;
            std::get< 1>(values_) = _id;
        }
        inline const int32_t &getCode() const { return std::get< 0>(values_); }
        inline void setCode(const int32_t &_value) { std::get< 0>(values_) = _value; }
        inline const std::string &getId() const { return std::get< 1>(values_); }
        inline void setId(const std::string &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const testStruct& _other) const {
        return (getCode() == _other.getCode() && getId() == _other.getId());
        }
        inline bool operator!=(const testStruct &_other) const {
            return !((*this) == _other);
        }
    
    };
};

const char* HelloWorld::getInterface() {
    return ("commonapi.HelloWorld:v1_0");
}

CommonAPI::Version HelloWorld::getInterfaceVersion() {
    return CommonAPI::Version(1, 0);
}


} // namespace commonapi
} // namespace v1

namespace CommonAPI {
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COMMONAPI_HELLO_WORLD_HPP_
